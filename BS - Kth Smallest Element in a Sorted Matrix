## Given a n x n matrix where each of the rows and columns are sorted in ascending order, find the kth smallest element in the matrix.
#Note that it is the kth smallest element in the sorted order, not the kth distinct element.

#### Option 1####
from bisect import bisect
def kthSmallest(matrix, k):
    lo, hi = matrix[0][0], matrix[-1][-1]
    while lo < hi:
        mid = lo + (hi - lo) // 2

        if sum(bisect(row, mid) for row in matrix) < k:
            lo = mid+1
        else:
            hi = mid
    return lo

#### Option 2 ####
from bisect import bisect
def kthSmallest(matrix, k):
    lo, hi = matrix[0][0], matrix[-1][-1]
    while lo < hi:
        mid = lo + (hi - lo) // 2
        total = 0 
        for row in matrix:
            idx = bisect(row, mid)
            print(row)
            print(mid, idx)
            total += idx
        if total < k:
            lo = mid+1
        else:
            hi = mid
    return lo
    
### Option 3 ####
def kthSmallest(matrix, k):
    n = len(matrix)
    L, R = matrix[0][0], matrix[n - 1][n - 1]
    while L < R:
        mid = L + (R - L) // 2
        temp = search_lower_than_mid(matrix, n, mid)
        if temp < k:
            L = mid + 1
        else:
            R = mid
    return L

def search_lower_than_mid(matrix, n, x):
    i, j = n - 1, 0
    cnt = 0
    while i >= 0 and j < n:
        if matrix[i][j] <= x:
            j += 1
            cnt += i + 1
        else:
            i -= 1
    return cnt
    
    
    
    
