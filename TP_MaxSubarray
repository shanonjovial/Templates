### Given an array having N positive integers, find the contiguous subarray having sum as great as possible, but not greater than M.

#### OPTION 1 ####
from itertools import accumulate  # since Python 3.2:
list(accumulate([1,2,3,4,5]))


### OPTION 2 ####
from itertools import accumulate  # since Python 3.2:

a = [4, 6, 12, 1, 2, 3, 4]
b = [0]
b = b + a
type(b)
b = list(accumulate(b))
b

#### OPTION 3 ####
def max_subarray(numbers, ceiling):
    
    cum_sum = [0]
    cum_sum = cum_sum + numbers
    cum_sum = list(accumulate(cum_sum))

    l = 0
    r = 1 # two pointers start at tip of the array.
    maximum = 0
    while l < len(cum_sum):
        while r < len(cum_sum) and cum_sum[r] - cum_sum[l] <= ceiling:
            r += 1
        if cum_sum[r - 1] - cum_sum[l] > maximum: # since cum_sum[0] = 0, thus r always > 0.
            maximum = cum_sum[r - 1] - cum_sum[l]
            pos = (l, r - 2)
        l += 1
    return pos
