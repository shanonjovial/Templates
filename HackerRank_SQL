####### TOP COMPETITORS ##########
## Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

SELECT hacker_id, name
FROM
    (SELECT H.hacker_id, H.name, count(*) as counts
    FROM Submissions S
    Join Hackers H on S.hacker_id = H.hacker_id
    Join Challenges C on S.challenge_id = C.challenge_id
    Join Difficulty D on C.difficulty_level =D.difficulty_level
    Where S.score = D.score
    Group by H.hacker_id, H.name) K
Where counts>1
Order by counts DESC, 1 


######## Ollivander's Inventory ##########
## Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
## Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age.

    %%%%%
SELECT W.id, P.age, W.coins_needed, W.power
FROM Wands W
JOIN Wands_Property P
    on W.code = P.code
WHERE W.coins_needed = (
                        SELECT min(coins_needed)
                        FROM Wands W2 
                        JOIN Wands_Property P2
                            on W2.code = P2.code
                        Where P2.is_evil  =0 and P.age = P2.age and W.power = W2.power
                        )
ORDER BY power DESC, age DESC


########### Challenge ###############
## Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result.

SELECT C.hacker_id, H.name, count(challenge_id) as challenges
FROM Hackers H
Join Challenges C
    on H.hacker_id = C.hacker_id
Group by H.hacker_id, H.name
Having challenges = (select count(challenge_id) as counts from challenges group by hacker_id order by counts DESC Limit 1) or 
        challenges not in (select count(challenge_id) from challenges C1 group by hacker_id having C1.hacker_id <> C.hacker_id)
Order by challenges DESC, 1


######### CONTEST LEADERBOARD ##########
## You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!

## The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of  from your result.

SELECT S.hacker_id, H.name, sum(score) as total_score
From Hackers H
Join     
    (Select hacker_id, max(score) as score
     From Submissions
     Group by hacker_id, challenge_id) S
    on H.hacker_id = S.hacker_id
Group by S.hacker_id, H.name
Having total_score >0
Order by 3 desc, 1


########### SQL Project Planning ###########
## You are given a table, Projects, containing three columns: Task_ID, Start_Date and End_Date. It is guaranteed that the difference between the End_Date and the Start_Date is equal to 1 day for each row in the table.

SELECT START_DATE, MIN(END_DATE)   ### MIN() can't have a alien
FROM
  (SELECT START_DATE
   FROM PROJECTS
   WHERE START_DATE NOT IN
       (SELECT END_DATE
        FROM PROJECTS)) A
JOIN
  (SELECT END_DATE
   FROM PROJECTS
   WHERE END_DATE NOT IN
       (SELECT START_DATE
        FROM PROJECTS)) B
    ON START_DATE < END_DATE
GROUP BY START_DATE
ORDER BY (MIN(END_DATE) - START_DATE), START_DATE;


###########
