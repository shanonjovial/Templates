################# Draw the Triangles 1 倒三角 #####################  
select @num = 20+1; 

select repeat('* ', @num:=@num-1)
from information_schema.tables;

################# Draw the Triangles 2 正三角 #################
set @num =0;

select repeat ('* ', @num:=@num+1)
from information_schema.tables
where @num<20

########################### Weather Oberservation Station 11 - either not start or end with vowel ######################
SELECT distinct CITY    ## 加 distinct 
FROM STATION 
WHERE (NOT REGEXP_LIKE (LOWER(CITY), '^[aeiou]')) OR (NOT REGEXP_LIKE(LOWER(CITY), '[aeiou]$'))

########################### Weather Oberservation Station 12 - not start and not end with vowel ######################
Select distinct city
From Station 
Where NOT regexp_like(lower(city), '^[aeiou].*|.*[aeiou]$')

########################### Weather Oberservation Station 20 - median ######################
A median is defined as a number separating the higher half of a data set from the lower half. Query the median of the Northern Latitudes (LAT_N) from STATION and round your answer to  decimal places.

SELECT ROUND(S.LAT_N, 4) AS MEDIAN
FROM STATION S
WHERE (select floor(count(ID)/2) from Station S2) = 
        (select count(ID) from Station S1 where S1.LAT_N > S.LAT_N)

################# The Blunder #################
select ceil(avg(Salary) - avg(replace(Salary, '0', '')))
from Employees

################  The Pads ###################
SELECT CONCAT(NAME,'(',SUBSTR(OCCUPATION,1,1),')') AS N
FROM OCCUPATIONS
ORDER BY N;
SELECT CONCAT('There are a total of ',COUNT(OCCUPATION),' ',LOWER(OCCUPATION),'s.')
FROM OCCUPATIONS
GROUP BY OCCUPATION
ORDER BY COUNT(OCCUPATION), OCCUPATION;

##############  Occupations Pivot #####################
select
    max(case Occupation when 'Doctor' then Name end) as Doctor,
    max(case Occupation when 'Professor' then Name end) as Professor,
    max(case Occupation when 'Singer' then Name end) as Singer,
    max(case Occupation when 'Actor' then Name end) as Actor
from (
        select
            Occupation,
            Name,
            row_number() over(partition by Occupation order by Name ASC) as NameOrder
        from Occupations
     ) as NameLists
group by NameOrder

############### Euclidean Distance - Weather Observation Station 19 #####################
select round(sqrt(
                    power( Max(LAT_N)-Min(LAT_N), 2 ) + 
                    power( Max(LONG_W)-Min(LONG_W), 2) ),4) as distance
from STATION


####### TOP COMPETITORS ##########
## Julia just finished conducting a coding contest, and she needs your help assembling the leaderboard! Write a query to print the respective hacker_id and name of hackers who achieved full scores for more than one challenge. Order your output in descending order by the total number of challenges in which the hacker earned a full score. If more than one hacker received full scores in same number of challenges, then sort them by ascending hacker_id.

SELECT hacker_id, name
FROM
    (SELECT H.hacker_id, H.name, count(*) as counts
    FROM Submissions S
    Join Hackers H on S.hacker_id = H.hacker_id
    Join Challenges C on S.challenge_id = C.challenge_id
    Join Difficulty D on C.difficulty_level =D.difficulty_level
    Where S.score = D.score
    Group by H.hacker_id, H.name) K
Where counts>1
Order by counts DESC, 1 

######## Ollivander's Inventory ##########
## Harry Potter and his friends are at Ollivander's with Ron, finally replacing Charlie's old broken wand.
## Hermione decides the best way to choose is by determining the minimum number of gold galleons needed to buy each non-evil wand of high power and age. Write a query to print the id, age, coins_needed, and power of the wands that Ron's interested in, sorted in order of descending power. If more than one wand has same power, sort the result in order of descending age.

SELECT W.id, P.age, W.coins_needed, W.power
FROM Wands W
JOIN Wands_Property P
    on W.code = P.code
WHERE W.coins_needed = (
                        SELECT min(coins_needed)
                        FROM Wands W2 
                        JOIN Wands_Property P2
                            on W2.code = P2.code
                        Where P2.is_evil  =0 and P.age = P2.age and W.power = W2.power
                        )
ORDER BY power DESC, age DESC


########### Challenge ###############
## Julia asked her students to create some coding challenges. Write a query to print the hacker_id, name, and the total number of challenges created by each student. Sort your results by the total number of challenges in descending order. If more than one student created the same number of challenges, then sort the result by hacker_id. If more than one student created the same number of challenges and the count is less than the maximum number of challenges created, then exclude those students from the result.

SELECT C.hacker_id, H.name, count(challenge_id) as challenges
FROM Hackers H
Join Challenges C
    on H.hacker_id = C.hacker_id
Group by H.hacker_id, H.name
Having challenges = (select count(challenge_id) as counts from challenges group by hacker_id order by counts DESC Limit 1) or 
        challenges not in (select count(challenge_id) from challenges C1 group by hacker_id having C1.hacker_id <> C.hacker_id)
Order by challenges DESC, 1


######### CONTEST LEADERBOARD ##########
## You did such a great job helping Julia with her last coding contest challenge that she wants you to work on this one, too!

## The total score of a hacker is the sum of their maximum scores for all of the challenges. Write a query to print the hacker_id, name, and total score of the hackers ordered by the descending score. If more than one hacker achieved the same total score, then sort the result by ascending hacker_id. Exclude all hackers with a total score of  from your result.
SELECT S.hacker_id, H.name, sum(score) as total_score
From Hackers H
Join     
    (Select hacker_id, max(score) as score
     From Submissions
     Group by hacker_id, challenge_id) S
    on H.hacker_id = S.hacker_id
Group by S.hacker_id, H.name
Having total_score >0
Order by 3 desc, 1

########### SQL Project Planning ###########
## You are given a table, Projects, containing three columns: Task_ID, Start_Date and End_Date. It is guaranteed that the difference between the End_Date and the Start_Date is equal to 1 day for each row in the table.

SELECT START_DATE, MIN(END_DATE)   ### MIN() can't have a alien
FROM
  (SELECT START_DATE
   FROM PROJECTS
   WHERE START_DATE NOT IN
       (SELECT END_DATE
        FROM PROJECTS)) A
JOIN
  (SELECT END_DATE
   FROM PROJECTS
   WHERE END_DATE NOT IN
       (SELECT START_DATE
        FROM PROJECTS)) B
    ON START_DATE < END_DATE
GROUP BY START_DATE
ORDER BY (MIN(END_DATE) - START_DATE), START_DATE;


########### Placements ########## KUDOS!!!!
## You are given three tables: Students, Friends and Packages. Students contains two columns: ID and Name. Friends contains two columns: ID and Friend_ID (ID of the ONLY best friend). Packages contains two columns: ID and Salary (offered salary in $ thousands per month).

SELECT S.Name
FROM 
    (SELECT F.ID, F.Friend_ID, P1.Salary as ID_Salary, P2.Salary as Fr_Salary
    From Friends F
    Join Packages P1 on F.ID = P1.ID
    Join Packages P2 on F.Friend_ID = P2.ID
    Where P1.Salary < P2.Salary) K
Join Students S on K.ID = S.ID
ORDER by Fr_Salary

###########Symmetric Pairs ######################
## You are given a table, Functions, containing two columns: X and Y.
## Two pairs (X1, Y1) and (X2, Y2) are said to be symmetric pairs if X1 = Y2 and X2 = Y1.
## Write a query to output all such symmetric pairs in ascending order by the value of X. List the rows such that X1 ≤ Y1.

 SELECT X, Y
 FROM
    (SELECT X, Y
    FROM FUNCTIONS 
    WHERE X=Y
    GROUP BY X, Y
    HAVING COUNT(*) >=2

    Union 

    SELECT F1.X, F1.Y
    FROM FUNCTIONS F1, FUNCTIONS F2
    WHERE F1.X < F1.Y AND F1.X = F2.Y AND F1.Y = F2.X) K
ORDER BY X, Y

##################### 15 DAYS OF LEARNING SQL ##########################
## Julia conducted a  days of learning SQL contest. The start date of the contest was March 01, 2016 and the end date was March 15, 2016.

## Write a query to print total number of unique hackers who made at least  submission each day (starting on the first day of the contest), and find the hacker_id and name of the hacker who made maximum number of submissions each day. If more than one such hacker has a maximum number of submissions, print the lowest hacker_id. The query should print this information for each day of the contest, sorted by the date.

# %%%%% Option 1
SELECT SUBMISSION_DATE,
       
       (SELECT Count(DISTINCT hacker_id) as no_of_unique_hacker_id 
        FROM submissions S2
        WHERE  S2.submission_date = S1.submission_date
            AND (SELECT Count(DISTINCT S3.submission_date)
                 FROM   submissions S3
                 WHERE  S3.hacker_id = S2.hacker_id
                 AND S3.submission_date < S1.submission_date
                ) = Datediff(S1.submission_date, '2016-03-01')
       ) AS NO_OF_UNIQUE_HACKERS,
       
       (SELECT hacker_id FROM submissions S2
        WHERE  S2.submission_date = S1.submission_date
        GROUP  BY hacker_id
        ORDER  BY Count(submission_id) DESC, hacker_id ASC 
        LIMIT  1
       ) AS MAX_SUB_HACKER_ID,
       
       (SELECT name FROM hackers
        WHERE  hacker_id = MAX_SUB_HACKER_ID
       ) AS NAME

FROM   (SELECT DISTINCT submission_date FROM submissions) S1
GROUP BY submission_date;

    
######### Print Prime Numbers #########
SELECT GROUP_CONCAT(NUMB SEPARATOR '&')
FROM (
    SELECT @num:=@num+1 as NUMB FROM
    information_schema.tables t1,
    information_schema.tables t2,
    (SELECT @num:=1) tmp
) tempNum
WHERE NUMB<=1000 AND NOT EXISTS(
        SELECT * FROM (
            SELECT @nu:=@nu+1 as NUMA FROM
                information_schema.tables t1,
                information_schema.tables t2,
                (SELECT @nu:=1) tmp1
                LIMIT 1000
            ) tatata
        WHERE FLOOR(NUMB/NUMA)=(NUMB/NUMA) AND NUMA<NUMB AND NUMA>1
        
        
################## Interviews ###############################
Select C.contest_id, C.hacker_id, C.name, 
        sum(S.total_submissions), 
        sum(S.total_accepted_submissions), 
        sum(V.total_views), 
        sum(V.total_unique_views)
From Contests C
Join Colleges CLG on C.contest_id = CLG.contest_id
Join Challenges CLL on CLG.college_id = CLL.college_id
Left Join (select challenge_id, sum(total_views) as total_views, 
                  sum(total_unique_views) as total_unique_views
           from View_Stats
           Group by 1)V on CLL.challenge_id = V.challenge_id
Left Join ( select challenge_id, sum(total_submissions) as total_submissions, 
            sum(total_accepted_submissions) as total_accepted_submissions
            from Submission_Stats
            Group by 1) S on CLL.challenge_id = S.challenge_id
Group by 1,2,3
Having (sum(S.total_submissions) +
        sum(S.total_accepted_submissions)+
        sum(V.total_views) +
        sum(V.total_unique_views)>0)








