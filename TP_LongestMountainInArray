## Let's call any (contiguous) subarray B (of A) a mountain if the following properties hold:
## B.length >= 3 There exists some 0 < i < B.length - 1 such that B[0] < B[1] < ... B[i-1] < B[i] > B[i+1] > ... > B[B.length - 1] (Note that B could be any subarray of A, including the entire array A.)
## Given an array A of integers, return the length of the longest mountain.
## Return 0 if there is no mountain.

def longestMountain(A):
    N = len(A)
    ans = base = 0

    while base < N:
        end = base
        if end + 1 < N and A[end] < A[end + 1]: #if base is a left-boundary
            #set end to the peak of this potential mountain
            while end+1 < N and A[end] < A[end+1]:
                end += 1

            if end + 1 < N and A[end] > A[end + 1]: #if end is really a peak..
                #set 'end' to right-boundary of mountain
                while end+1 < N and A[end] > A[end+1]:
                    end += 1
                #record candidate answer
                ans = max(ans, end - base + 1)

        base = max(end, base + 1)

    return ans
